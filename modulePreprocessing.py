'''
Explications :
La fonction file_download prend en entr√©e :
    - start_date : Date de d√©but
    - path : URL o√π les fichiers sont stock√©s
    - file_name : Nom du fichier √† t√©l√©charger
    - storage_folder : Dossier de stockage local

Etapes du script :
    - T√©l√©chargement des fichiers depuis un chemin de base, 
    - Les fichiers sont stock√©s localement, 
    - Affiche d'un message en cas de r√©ussite ou d'√©chec pour chaque t√©l√©chargement. 

Exemple :
file_download(start_date = '2023-10-29', path = 'https://sc-e.fr/docs/', file_name = 'logs_vols_AAAA-MM-JJ.csv', storage_folder = 'incoming')
'''

import os  # Pour la gestion des fichiers et des r√©pertoires
import requests  # Pour effectuer des requ√™tes HTTP
from datetime import datetime, timedelta  # Pour manipuler les dates

def file_download(start_date, path, file_name, storage_folder):
    print()
    print(f"üíæ T√©l√©chargement des fichiers {file_name}.")
    # Conversion de la date de d√©but
    # La date est contenue dans le nom du fichier au format 'AAAA-MM-JJ') 
    start_date = datetime.strptime(start_date, '%Y-%m-%d')
    
    # Tant que la date actuelle est sup√©rieure ou √©gale √† la date de d√©but
    while start_date <= datetime.now():
        # Construction du nom du fichier complet en rempla√ßant 'AAAA-MM-JJ' par la date format√©e
        # La date contenue dans start_date est format√©e en une cha√Æne de caract√®res au format 'AAAA-MM-JJ'. 
        # Explications : si start_date est le 29 octobre 2023, alors date_format deviendra la cha√Æne de caract√®res "2023-10-29". 
        # Utilisation de strftime pour formater la date selon le mod√®le sp√©cifi√©.
        date_format = start_date.strftime('%Y-%m-%d')
        # Substitution de la date format√©e √† la place de 'AAAA-MM-JJ' dans le nom du fichier. 
        # Explications : si file_name est "logs_vols_AAAA-MM-JJ.csv" , alors file_name_complet deviendra "logs_vols_2023-10-29.csv". 
        file_name_complet = file_name.replace('AAAA-MM-JJ', date_format)
        
        # Construction de l'URL compl√®te en combinant l'URL et le nom du fichier complet
        url = os.path.join(path, file_name_complet)
        
        # T√©l√©chargement du fichier depuis l'URL
        response = requests.get(url)
        
        # V√©rification de la r√©ponse du serveur (status_code == 200 signifie que la requ√™te a r√©ussi)
        if response.status_code == 200:
            # Cr√©ation du chemin complet du fichier de destination en combinant le dossier de stockage et le nom du fichier complet
            path_destination = os.path.join(storage_folder, file_name_complet)
            
            # Enregistrement du fichier t√©l√©charg√© localement dans le dossier de stockage
            # Ouverture du fichier en mode write binary (wb) 
            with open(path_destination, 'wb') as fichier_destination:
                fichier_destination.write(response.content)
            
            # Affichage d'un message de succ√®s
            print(f"‚úÖ Fichier {file_name_complet} t√©l√©charg√© avec succ√®s.")
        else:
            # Affichage d'un message d'√©chec en cas de probl√®me lors du t√©l√©chargement
            print(f"‚ùå √âchec du t√©l√©chargement du fichier {file_name_complet}.")
        
        # Passage √† la date suivante en ajoutant un jour
        start_date = start_date + timedelta(days=1)
